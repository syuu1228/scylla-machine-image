#!/usr/bin/env python3
#
# Copyright 2020 ScyllaDB
#
# SPDX-License-Identifier: Apache-2.0

import argparse
import sys
from pathlib import Path
from subprocess import run
from lib.scylla_cloud import is_ec2, is_gce, is_azure, get_cloud_instance, out

class DiskIsNotEmptyError(Exception):
    def __init__(self, disk):
        self.disk = disk
        pass

    def __str__(self):
        return f"{self.disk} is not empty, abort setup"

class NoDiskFoundError(Exception):
    def __init__(self):
        pass

    def __str__(self):
        return "No data disk found, abort setup"

def create_raid(devices, raid_level=0):
    if len(devices) == 0:
        raise(NoDiskFoundError)
    scylla_path = Path("/var/lib/scylla")
    print(f"Devices: {devices}")
    if scylla_path.is_mount():
        print(f"{scylla_path} is already mounted. Will not run 'scylla_raid_setup'!")
        sys.exit(0)
    run(["/opt/scylladb/scripts/scylla_raid_setup", "--raiddev", "/dev/md0", "--disks", ",".join(devices),
         "--root", "/var/lib/scylla", "--raid-level", f"{raid_level}", "--volume-role", "all", "--update-fstab"], check=True)


def check_persistent_disks_are_empty(disks):
    for disk in disks:
        part = out(f'lsblk -dpnr -o PTTYPE /dev/{disk}')
        fs = out(f'lsblk -dpnr -o FSTYPE /dev/{disk}')
        if part != '' or fs != '':
            raise DiskIsNotEmptyError(f'/dev/{disk}')


def get_disk_devices(instance, device_type):
    if is_ec2():
        devices = []
        if device_type == "attached":
            check_persistent_disks_are_empty(instance.get_remote_disks())
            devices = [str(Path('/dev', name)) for name in instance.get_remote_disks() if Path('/dev', name).exists()]
        if not devices or device_type == "instance_store":
            devices = [str(Path('/dev', name)) for name in instance.get_local_disks()]
        if not devices:
            raise Exception(f"No block devices were found for '{device_type}' device type")
        return devices
    elif is_gce():
        return get_default_devices(instance)
    elif is_azure():
        return get_default_devices(instance)
    else:
        raise Exception("Running in unknown cloud environment")


def get_default_devices(instance):
    disk_names = []
    disk_names = instance.get_local_disks()
    if not disk_names:
        disk_names = instance.get_remote_disks()
        check_persistent_disks_are_empty(disk_names)
    return [str(Path('/dev', name)) for name in disk_names]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Disk creation script for Scylla.')
    parser.add_argument('--data-device', dest='data_device', action='store',
                        choices=["auto", "attached", "instance_store"],
                        help='Define type of device to use for scylla data: attached|instance_store')
    parser.add_argument('--raid-level', dest='raid_level', action='store',
                        choices=[0, 5], default=0, type=int,
                        help='Define raid level to use: RAID0 or RAID5')
    args = parser.parse_args()

    instance = get_cloud_instance()

    try:
        if not args.data_device or args.data_device == "auto":
            disk_devices = get_default_devices(instance)
        else:
            disk_devices = get_disk_devices(instance, args.data_device)
        create_raid(disk_devices, args.raid_level)
    except (DiskIsNotEmptyError, NoDiskFoundError) as e:
        print(e)
        sys.exit(1)
